/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/root/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint returning a welcome message.
         */
        get: operations["root_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/root/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health
         * @description Health check endpoint returning OK status.
         */
        get: operations["health_root_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/root/listen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listen
         * @description Listen endpoint for the agent scheduler.
         */
        get: operations["listen_root_listen_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/number": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Account Number */
        get: operations["read_account_number_account_number_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Account Summary */
        get: operations["read_account_summary_account_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trades/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all trades
         * @description Get all trades
         */
        get: operations["read_trades_trades__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scenarios/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search scenarios
         * @description Search scenarios based on filters.
         *
         *     :param page: Page number.
         *     :param page_size: Page size.
         *     :param filters: Filters for searching scenarios.
         *     :param db: Database session.
         *     :param settings: Application settings.
         *     :return: List of scenarios.
         */
        post: operations["search_scenarios_scenarios_search_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scenarios/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new scenario
         * @description Create a new scenario.
         *
         *     :param scenario: Scenario data to create.
         *     :param db: Database session.
         *     :return: The created scenario.
         */
        post: operations["create_scenario_scenarios__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scenarios/{scenario_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a scenario by ID
         * @description Read a scenario by ID.
         *
         *     :param scenario_id: ID of the scenario to retrieve.
         *     :param db: Database session.
         *     :return: The scenario details.
         */
        get: operations["read_scenario_scenarios__scenario_id__get"];
        /**
         * Update a scenario
         * @description Update a scenario by ID.
         *
         *     :param scenario_id: ID of the scenario to update.
         *     :param scenario: Updated scenario data.
         *     :param db: Database session.
         *     :return: The updated scenario.
         */
        put: operations["update_scenario_scenarios__scenario_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search contracts
         * @description Search contracts based on filters.
         *
         *     :param page: Page number.
         *     :param page_size: Page size.
         *     :param filters: Filters for searching contracts.
         *     :param db: Database session.
         *     :param settings: Application settings.
         *     :return: List of contracts.
         */
        post: operations["search_contracts_contracts_search_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new contract
         * @description Create a new contract.
         *
         *     :param contract: Contract data to create.
         *     :param db: Database session.
         *     :return: The created contract.
         */
        post: operations["create_contract_contracts__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{contract_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a contract by ID
         * @description Read a contract by ID.
         *
         *     :param contract_id: ID of the contract to retrieve.
         *     :param db: Database session.
         *     :return: The contract details.
         */
        get: operations["read_contract_contracts__contract_id__get"];
        /**
         * Update a contract
         * @description Update a contract by ID.
         *
         *     :param contract_id: ID of the contract to update.
         *     :param contract: Updated contract data.
         *     :param db: Database session.
         *     :return: The updated contract.
         */
        put: operations["update_contract_contracts__contract_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AccountValue */
        AccountValue: {
            /** Account */
            account: string;
            /** Tag */
            tag: string;
            /** Value */
            value: string;
            /** Currency */
            currency: string;
            /** Modelcode */
            modelCode: string;
        };
        /** ContractSchema */
        ContractSchema: {
            /** Id */
            id: number;
            contract?: components["schemas"]["FutureContracts"];
            /** Active */
            active?: boolean;
            /** Exchange */
            exchange?: string;
            /** Currency */
            currency?: string;
            /** Last Trade Date Or Contract Month */
            last_trade_date_or_contract_month?: string;
        };
        /** ContractSchemaCreate */
        ContractSchemaCreate: {
            /** Id */
            id: number;
            contract?: components["schemas"]["FutureContracts"];
            /** Active */
            active?: boolean;
            /** Exchange */
            exchange?: string;
            /** Currency */
            currency?: string;
            /** Last Trade Date Or Contract Month */
            last_trade_date_or_contract_month?: string;
        };
        /** ContractSchemaSearch */
        ContractSchemaSearch: Record<string, never>;
        /** ContractSchemaUpdate */
        ContractSchemaUpdate: {
            /** Id */
            id?: number;
            contract?: components["schemas"]["FutureContracts"];
            /** Active */
            active?: boolean;
            /** Exchange */
            exchange?: string;
            /** Currency */
            currency?: string;
            /** Last Trade Date Or Contract Month */
            last_trade_date_or_contract_month?: string;
        };
        /**
         * FutureContracts
         * @description An enumeration.
         * @enum {string}
         */
        FutureContracts: "ES" | "NQ" | "YM" | "RTY" | "MES" | "MNQ" | "MYM" | "M2K" | "MGC" | "MCL";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** OrderSchema */
        OrderSchema: {
            /** Id */
            id: number;
            /** Trade Id */
            trade_id?: number;
            /** Client Id */
            client_id?: number;
            /** Action */
            action?: string;
            /** Total Quantity */
            total_quantity?: number;
            /** Order Type */
            order_type?: string;
            /** Lmt Price */
            lmt_price?: number;
            /** Account */
            account?: string;
        };
        /** ScenarioSchema */
        ScenarioSchema: {
            /** Id */
            id?: number;
            /** Contract Id */
            contract_id?: number;
            /** Action */
            action?: string;
            select_strategy?: components["schemas"]["StrategyType"];
            /** Break Down Price */
            break_down_price?: number;
            /** Enter Price */
            enter_price?: number;
            /** Stop Price */
            stop_price?: number;
            stop_price_mode?: components["schemas"]["StopPriceMode"];
            /** Description */
            description?: string;
            /** Is Quality Scenario */
            is_quality_scenario?: boolean;
            /** Take Profit Levels */
            take_profit_levels?: components["schemas"]["TakeProfitLevelSchema"][];
            /**
             * Date Trade
             * Format: date-time
             */
            date_trade?: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
        };
        /** ScenarioSchemaCreate */
        ScenarioSchemaCreate: {
            /** Contract Name */
            contract_name: string;
            /** Action */
            action: string;
            select_strategy: components["schemas"]["StrategyType"];
            /** Break Down Price */
            break_down_price: number;
            /** Enter Price */
            enter_price?: number;
            /** Stop Price */
            stop_price?: number;
            stop_price_mode: components["schemas"]["StopPriceMode"];
            /** Description */
            description: string;
            /** Is Quality Scenario */
            is_quality_scenario: boolean;
            /** Take Profit Levels */
            take_profit_levels?: components["schemas"]["TakeProfitLevelSchema"][];
            /**
             * Date Trade
             * Format: date-time
             */
            date_trade?: string;
        };
        /** ScenarioSchemaSearch */
        ScenarioSchemaSearch: Record<string, never>;
        /** ScenarioSchemaUpdate */
        ScenarioSchemaUpdate: {
            /** Id */
            id?: number;
            /** Contract Id */
            contract_id?: number;
            /** Action */
            action?: string;
            select_strategy?: components["schemas"]["StrategyType"];
            /** Break Down Price */
            break_down_price?: number;
            /** Enter Price */
            enter_price?: number;
            /** Stop Price */
            stop_price?: number;
            stop_price_mode?: components["schemas"]["StopPriceMode"];
            /** Description */
            description?: string;
            /** Is Quality Scenario */
            is_quality_scenario?: boolean;
            /** Take Profit Levels */
            take_profit_levels?: components["schemas"]["TakeProfitLevelSchema"][];
            /**
             * Date Trade
             * Format: date-time
             */
            date_trade?: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
        };
        /**
         * StopPriceMode
         * @description An enumeration.
         * @enum {unknown}
         */
        StopPriceMode: "AUTOMATIC" | "MANUAL";
        /**
         * StrategyType
         * @description An enumeration.
         * @enum {string}
         */
        StrategyType: "FALSE_BREAKOUT";
        /** TakeProfitLevelSchema */
        TakeProfitLevelSchema: {
            /** Id */
            id?: number;
            /** Scenario Id */
            scenario_id?: number;
            /** Price */
            price: number;
            /** Quantity */
            quantity: number;
        };
        /** TradeSchema */
        TradeSchema: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            scenario_id?: components["schemas"]["ScenarioSchema"];
            contract_id?: components["schemas"]["ContractSchema"];
            /** Orders */
            orders?: components["schemas"]["OrderSchema"][];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    root_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    health_root_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listen_root_listen_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    read_account_number_account_number_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    read_account_summary_account_summary_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown[][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    read_trades_trades__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TradeSchema"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_scenarios_scenarios_search_post: {
        parameters: {
            query?: {
                page?: number;
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ScenarioSchemaSearch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioSchema"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_scenario_scenarios__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioSchemaCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioSchema"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_scenario_scenarios__scenario_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scenario_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioSchema"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_scenario_scenarios__scenario_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scenario_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScenarioSchemaUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScenarioSchema"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_contracts_contracts_search_post: {
        parameters: {
            query?: {
                page?: number;
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ContractSchemaSearch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractSchema"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_contract_contracts__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractSchemaCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractSchema"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_contract_contracts__contract_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractSchema"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_contract_contracts__contract_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contract_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractSchemaUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractSchema"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
